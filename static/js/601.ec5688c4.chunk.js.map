{"version":3,"file":"static/js/601.ec5688c4.chunk.js","mappings":"8RAEaA,EAAYC,EAAAA,EAAAA,IAAH,oRAaTC,EAAWD,EAAAA,EAAAA,IAAH,orB,+DCmCrB,EA1Ca,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEKC,EAAAA,EAAAA,IAAQP,GAFb,OAERQ,EAFQ,OAGdJ,EAAQI,EAAKL,MAHC,yEAKP,KAAIM,SALG,yDAAH,qDAQfH,GACD,GAAE,CAACN,KAGF,+BACE,UAACH,EAAD,YACE,SAAC,EAAAa,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,OACpB,8BACGT,EAAKU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,UAApC,OACR,UAAClB,EAAD,YACE,gBACEmB,IACmB,OAAjBF,EAAA,UACOG,GADP,UAvBG,kCAuBH,YAEqBH,GAEvBI,IAAK,MAEP,wBAAKL,KACL,yBAAG,cAAYE,OAVFH,EADP,UAkBnB,C,mMC/CKO,EAAU,mCAEVC,EAAe,sCAGRC,EAAS,mCAAG,WAAMC,GAAN,yFACAC,EAAAA,EAAAA,IALJ,kDAK4B,CAC7CC,OAAQ,CACNC,QAASN,EACTG,KAAMA,EACNI,YAAa,MALM,uBACfpB,EADe,EACfA,KADe,kBAQhBA,GARgB,2CAAH,sDAWTqB,EAAY,mCAAG,WAAMf,GAAN,yFACHW,EAAAA,EAAAA,IAAA,UAAaH,EAAeQ,OAAOhB,IAAO,CAC/DY,OAAQ,CACNC,QAASN,KAHa,uBAClBb,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZD,EAAO,mCAAG,WAAMO,GAAN,yFACEW,EAAAA,EAAAA,IAAA,UAAaH,EAAeQ,OAAOhB,GAAnC,YAAkD,CACvEY,OAAQ,CACNC,QAASN,KAHQ,uBACbb,EADa,EACbA,KADa,kBAMdA,GANc,2CAAH,sDASPuB,EAAU,mCAAG,WAAMjB,GAAN,yFACDW,EAAAA,EAAAA,IAAA,UAAaH,EAAeQ,OAAOhB,GAAnC,YAAkD,CACvEY,OAAQ,CACNC,QAASN,KAHW,uBAChBb,EADgB,EAChBA,KADgB,kBAMjBA,GANiB,2CAAH,sDASVwB,EAAU,mCAAG,WAAOC,EAAaT,GAApB,yFACDC,EAAAA,EAAAA,IAzCN,4CAyC4B,CAC3CC,OAAQ,CACNC,QAASN,EACTa,MAAOD,EACPT,KAAMA,KALc,uBAChBhB,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,uD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/tmdb-api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  align-items: baseline;\n  width: auto;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  justify-content: space-around;\n  grid-gap: 5px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const CastCard = styled.div`\n  display: flex;\n  width: auto;\n  flex-direction: column;\n  justify-content: flex-end;\n  border: 1px solid black;\n  border-radius: 4px;\n\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n    0px 2px 1px -1px rgba(191, 84, 84, 0.12);\n\n  > img {\n    display: block;\n    width: 215px;\n    height: 323px;\n    background-color: #dedede;\n    object-fit: cover;\n    border-top-right-radius: 4px;\n    border-top-left-radius: 4px;\n  }\n\n  > a {\n    text-decoration: none;\n  }\n\n  > h2 {\n    margin: 4px 0px 0px 4px;\n    font-size: 16px;\n  }\n\n  > p {\n    margin: 4px 0px 6px 4px;\n    font-size: 14px;\n  }\n`;","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'components/tmdb-api';\nimport { Loader } from 'components/Loader/Loader';\nimport { Container, CastCard } from './Cast.styled';\nimport defaultImage from './noimage.png';\nimport { Suspense } from 'react';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const POSTER_URL = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const data = await getCast(movieId);\n        setCast(data.cast);\n      } catch (err) {\n        return err.message;\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  return (\n    <>\n      <Container>\n        <Suspense fallback={<Loader />}></Suspense>\n        <>\n          {cast.map(({ id, original_name, profile_path, character }) => (\n            <CastCard key={id}>\n              <img\n                src={\n                  profile_path === null\n                    ? `${defaultImage}`\n                    : `${POSTER_URL}/${profile_path}`\n                }\n                alt={''}\n              />\n              <h2>{original_name}</h2>\n              <p>Character: {character}</p>\n            </CastCard>\n          ))}\n        </>\n      </Container>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'fc79b9c24904503e15894f783d71423b';\nconst API_TRENDING = 'https://api.themoviedb.org/3/trending/movie/day';\nconst API_MOVIE_ID = 'https://api.themoviedb.org/3/movie/';\nconst API_SEARCH = 'https://api.themoviedb.org/3/search/movie';\n\nexport const getMovies = async page => {\n  const { data } = await axios.get(API_TRENDING, {\n    params: {\n      api_key: API_KEY,\n      page: page,\n      total_pages: 12,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getCast = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getKeyWord = async (searchQuery, page) => {\n  const { data } = await axios.get(API_SEARCH, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n      page: page,\n    },\n  });\n\n  return data;\n};\n"],"names":["Container","styled","CastCard","movieId","useParams","useState","cast","setCast","useEffect","fetchData","getCast","data","message","Suspense","fallback","Loader","map","id","original_name","profile_path","character","src","defaultImage","alt","API_KEY","API_MOVIE_ID","getMovies","page","axios","params","api_key","total_pages","getMovieById","String","getReviews","getKeyWord","searchQuery","query"],"sourceRoot":""}