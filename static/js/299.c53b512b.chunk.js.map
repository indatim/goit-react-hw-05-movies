{"version":3,"file":"static/js/299.c53b512b.chunk.js","mappings":"iRAEaA,EAAYC,EAAAA,EAAAA,IAAH,6IAOTC,EAAcD,EAAAA,EAAAA,IAAH,uYAkBXE,EAAaF,EAAAA,EAAAA,GAAH,wMAWVG,EAAMH,EAAAA,EAAAA,IAAH,iG,SC3BHI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,SAACR,EAAD,UACGM,EAAOG,KAAI,SAAAC,GACV,IAAQC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,aAAcC,EAAoBH,EAApBG,YAAaC,EAAOJ,EAAPI,GACpCC,EAAyB,OAAhBF,EAAA,UAA0BG,GAA1B,UAPF,kCAOE,YAA4DH,GAE3E,OACE,SAACX,EAAD,WACE,UAAC,KAAD,CAAMe,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMZ,GAA1C,WACE,SAACH,EAAD,CACEgB,IAAKL,EACLM,IAAKV,KAEP,UAACR,EAAD,WACGQ,EAAM,KAAGC,EAAaU,MAAM,EAAG,UAPpBR,EAYrB,KAGN,C,mMCrCKS,EAAU,mCAEVC,EAAe,sCAGRC,EAAS,mCAAG,WAAMC,GAAN,yFACAC,EAAAA,EAAAA,IALJ,kDAK4B,CAC7CC,OAAQ,CACNC,QAASN,EACTG,KAAMA,EACNI,YAAa,MALM,uBACfC,EADe,EACfA,KADe,kBAQhBA,GARgB,2CAAH,sDAWTC,EAAY,mCAAG,WAAMlB,GAAN,yFACHa,EAAAA,EAAAA,IAAA,UAAaH,EAAeS,OAAOnB,IAAO,CAC/Dc,OAAQ,CACNC,QAASN,KAHa,uBAClBQ,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZG,EAAU,mCAAG,WAAMpB,GAAN,yFACDa,EAAAA,EAAAA,IAAA,UAAaH,EAAeS,OAAOnB,GAAnC,YAAkD,CACvEc,OAAQ,CACNC,QAASN,KAHW,uBAChBQ,EADgB,EAChBA,KADgB,kBAMjBA,GANiB,2CAAH,sDASVI,EAAU,mCAAG,WAAMrB,GAAN,yFACDa,EAAAA,EAAAA,IAAA,UAAaH,EAAeS,OAAOnB,GAAnC,YAAkD,CACvEc,OAAQ,CACNC,QAASN,KAHW,uBAChBQ,EADgB,EAChBA,KADgB,kBAMjBA,GANiB,2CAAH,sDASVK,EAAU,mCAAG,WAAOC,EAAaX,GAApB,yFACDC,EAAAA,EAAAA,IAzCN,4CAyC4B,CAC3CC,OAAQ,CACNC,QAASN,EACTe,MAAOD,EACPX,KAAMA,KALc,uBAChBK,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,uD,0HCPvB,UAhCa,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOjC,EAAP,KAAekC,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,sGAEtBF,GAAS,GACTF,GAAa,GAHS,UAIIjB,EAAAA,EAAAA,MAJJ,gBAIdsB,EAJc,EAIdA,QACRP,EAAUO,GALY,kDAOtBH,GAAS,GAPa,yBAStBF,GAAa,GATS,6EAAH,qDAYvBI,GACD,GAAE,KAGD,6BACE,wBAAI,mBACHH,GACC,uBAAG,4BACD,KACHF,GAAY,SAAC,IAAD,KAAa,SAAC,IAAD,CAAYnC,OAAQA,MAGnD,C","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/Movielist.jsx","components/tmdb-api.jsx","pages/Home.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 220px);\n  justify-content: space-around;\n  gap: 20px;\n`;\n\nexport const CardWrapper = styled.div`\n  border: 1px solid black;\n  border-radius: 4px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n    0px 2px 1px -1px rgba(191, 84, 84, 0.12);\n\n  > a {\n    text-decoration: none;\n  }\n\n  &:hover {\n    transform: scale(1.03);\n    cursor: zoom-in;\n  }\n`;\n\nexport const MovieTitle = styled.h4`\n  padding: 4px;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  align-content: center;\n  color: black;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const Img = styled.img`\n  display: block;\n  width: 100%;\n  height: 90%;\n  object-fit: cover;\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport defaultImage from '../noposter.png';\nimport {\n  Container,\n  CardWrapper,\n  MovieTitle,\n  Img,\n} from 'components/MovieList/MovieList.styled';\n\n\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const POSTER_URL = 'https://image.tmdb.org/t/p/w300';\n  // const poster = poster_path;\n\n  return (\n    <Container>\n      {movies.map(movie => {\n        const { title, release_date, poster_path, id } = movie;\n        const poster = poster_path === null ? `${defaultImage}` : `${POSTER_URL}/${poster_path}`;\n        \n        return (\n          <CardWrapper key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <Img\n                src={poster}\n                alt={title}\n              />\n              <MovieTitle>\n                {title}, {release_date.slice(0, 4)}\n              </MovieTitle>\n            </Link>\n          </CardWrapper>\n        );\n      })}\n    </Container>\n  );\n};","import axios from 'axios';\nconst API_KEY = 'fc79b9c24904503e15894f783d71423b';\nconst API_TRENDING = 'https://api.themoviedb.org/3/trending/movie/day';\nconst API_MOVIE_ID = 'https://api.themoviedb.org/3/movie/';\nconst API_SEARCH = 'https://api.themoviedb.org/3/search/movie';\n\nexport const getMovies = async page => {\n  const { data } = await axios.get(API_TRENDING, {\n    params: {\n      api_key: API_KEY,\n      page: page,\n      total_pages: 12,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await axios.get(`${API_MOVIE_ID + String(id)}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return data;\n};\n\nexport const getKeyWord = async (searchQuery, page) => {\n  const { data } = await axios.get(API_SEARCH, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n      page: page,\n    },\n  });\n\n  return data;\n};\n","import { useEffect, useState } from 'react';\nimport { MoviesList } from 'components/MovieList/Movielist';\nimport { getMovies } from 'components/tmdb-api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      try {\n        setError(false);\n        setIsLoading(true);\n        const { results } = await getMovies();\n        setMovies(results);\n      } catch (error) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getTrendingMovies();\n  }, []);\n\n  return (\n    <main>\n      <h2>Trending today</h2>\n      {error ? (\n        <p>Please try again later.</p>\n      ) : null}\n      {isLoading ? <Loader /> : <MoviesList movies={movies} />}\n    </main>\n  );\n};\n\nexport default Home;\n\n// const Home = () => {\n//   const [movies, setMovies] = useState([]);\n//   const [page, setPage] = useState(1);\n//   const [showBtn, setShowBtn] = useState(false);\n\n//   useEffect(() => {\n//     (async function fetchData() {\n//       try {\n//         const data = await getMovies(page);\n//         const { results, total_pages } = data;\n//         setShowBtn(page < Math.ceil(total_pages / 66));\n//         setMovies([...results]);\n//       } catch (err) {\n//         console.log(err.message);\n//       }\n//     })();\n//   }, [page]);\n\n//   const clickBtn = () => {\n//     setPage(prevState => prevState + 1);\n//   };\n\n//   return (\n//     <main>\n//       <h2>Trending today</h2>\n//       <MoviesList movies={movies} />\n//       {showBtn && <LoadMoreButton clickBtn={clickBtn} />}\n//     </main>\n//   );\n// };\n\n// export default Home;\n"],"names":["Container","styled","CardWrapper","MovieTitle","Img","MoviesList","movies","location","useLocation","map","movie","title","release_date","poster_path","id","poster","defaultImage","to","state","from","src","alt","slice","API_KEY","API_MOVIE_ID","getMovies","page","axios","params","api_key","total_pages","data","getMovieById","String","getCredits","getReviews","getKeyWord","searchQuery","query","useState","setMovies","isLoading","setIsLoading","error","setError","useEffect","getTrendingMovies","results"],"sourceRoot":""}